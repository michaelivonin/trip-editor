{"version":3,"sources":["components/Input/Input.js","components/Places/Places.js","components/YMap/YMap.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","handleChange","bind","handleSubmit","args","this","onInputChange","event","preventDefault","onInputSubmit","className","onSubmit","type","autoFocus","placeholder","value","onChange","React","Component","Places","handleMove","handleRemove","onPointMove","onButtonDelete","values","places","oldIndex","newIndex","renderList","children","isDragged","style","cursor","renderItem","index","address","onClick","YMap","transfer","setNewBounds","handleDrag","ymaps","handleTransfer","map","objects","geoObjects","getLength","setCenter","get","geometry","getCoordinates","duration","setBounds","getBounds","checkZoomRange","onDragEnd","query","apikey","instanceRef","ref","onLoad","events","add","defaultState","center","zoom","modules","length","place","i","key","coordinates","properties","iconContent","balloonContent","options","preset","draggable","balloonCloseButton","strokeColor","strokeWidth","strokeOpacity","App","state","point","setState","target","newPoint","geocode","then","result","metaData","geocoder","found","alert","concat","err","console","log","message","prevState","arrayMove","arrayRemove","newCoordinates","coords","toPrecision","getAll","text","Object","assign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd6c0d2f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.sass';\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(args) {\r\n    this.props.onInputChange(args);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.onInputSubmit();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"App__form\"\r\n        onSubmit={this.handleSubmit}\r\n      >\r\n        <label>\r\n          <input\r\n            className={this.props.className}\r\n            type=\"text\"\r\n            autoFocus\r\n            placeholder={this.props.placeholder}\r\n            value={this.props.value}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './Places.sass';\r\nimport { List } from \"react-movable\";\r\n\r\nclass Places extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleMove = this.handleMove.bind(this);\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n  }\r\n\r\n  handleMove(args) {\r\n    this.props.onPointMove(args);\r\n  }\r\n\r\n  handleRemove(args) {\r\n    this.props.onButtonDelete(args);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <List\r\n        values={this.props.places}\r\n        onChange={({ oldIndex, newIndex }) =>\r\n          this.handleMove({ oldIndex, newIndex })\r\n        }\r\n        renderList={({ children, props, isDragged }) => (\r\n          <ol\r\n            className={this.props.className}\r\n            {...props}\r\n            style={{cursor: isDragged ? 'grabbing' : 'inherit'}}\r\n          >\r\n            {children}\r\n          </ol>\r\n        )}\r\n        renderItem={({ value, props, isDragged, index }) => (\r\n          <li\r\n            className=\"App__places-item\"\r\n            {...props}\r\n            style={{\r\n              ...props.style,\r\n              cursor: isDragged ? 'grabbing' : 'grab',\r\n            }}\r\n          >\r\n            <div className=\"App__value-wrapper\">\r\n              <div>{value.address}</div>{' '}\r\n              <button\r\n                className=\"App__places-button\"\r\n                onClick={() => this.handleRemove(index)}\r\n              >\r\n                &#10006;\r\n              </button>\r\n            </div>\r\n          </li>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Places;","import React from 'react';\r\nimport './YMap.sass';\r\nimport { YMaps, Map, Placemark, Polyline } from 'react-yandex-maps';\r\n\r\nclass YMap extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.transfer = this.transfer.bind(this);\r\n    this.setNewBounds = this.setNewBounds.bind(this);\r\n    this.handleDrag = this.handleDrag.bind(this);\r\n  }\r\n\r\n  transfer(ymaps) {\r\n    this.props.handleTransfer(ymaps);\r\n  }\r\n\r\n  setNewBounds(map) {\r\n    const objects = map.geoObjects;\r\n    if (objects.getLength() === 1) {\r\n      map.setCenter(\r\n        objects.get(0).geometry.getCoordinates(), 8, {duration: 350}\r\n      );\r\n    }\r\n    if (objects.getLength() > 1) {\r\n      map.setBounds(\r\n        objects.getBounds(), {checkZoomRange: true, duration: 350,}\r\n      );\r\n    }\r\n  }\r\n\r\n  handleDrag(event, index) {\r\n    this.props.onDragEnd(event, index);\r\n  }\r\n\r\n  render() {\r\n    const places = this.props.places;\r\n\r\n    return (\r\n      <YMaps query={{apikey: '9fbf58eb-f5d4-47d2-9d6b-7507e2ecb7c9'}}>\r\n        <div className={this.props.className}>\r\n          <Map\r\n            className=\"App__map\"\r\n            instanceRef={(ref) => this.map = ref}\r\n            onLoad={(ymaps) => {\r\n              this.transfer(ymaps);\r\n              this.map.geoObjects.events.add(\r\n                ['add', 'dragend', 'remove'], () => this.setNewBounds(this.map)\r\n              );\r\n            }}\r\n            defaultState={{\r\n              center: [55.75, 37.57],\r\n              zoom: 9,\r\n            }}\r\n            modules={['geocode']}\r\n          >\r\n            {!places.length || places.map((place, i) => (\r\n              <Placemark\r\n                key={i}\r\n                geometry={place.coordinates}\r\n                modules={['geoObject.addon.balloon']}\r\n                properties={{\r\n                  iconContent: i + 1,\r\n                  balloonContent: place.address,\r\n                }}\r\n                options={{\r\n                  preset: 'islands#blackStretchyIcon',\r\n                  draggable: true,\r\n                }}\r\n                onDragEnd={(event) => this.handleDrag(event, i)}\r\n              />\r\n            ))}\r\n            {places.length > 1 ?\r\n              (<Polyline\r\n                geometry={places.map((place) => place.coordinates)}\r\n                options={{\r\n                  balloonCloseButton: false,\r\n                  strokeColor: '#000',\r\n                  strokeWidth: 4,\r\n                  strokeOpacity: 0.5,\r\n                }}\r\n              />) :\r\n              null\r\n            }\r\n          </Map>\r\n        </div>\r\n      </YMaps>\r\n    );\r\n  }\r\n}\r\n\r\nexport default YMap;","import React from 'react';\nimport './App.sass';\nimport Input from './components/Input/Input'\nimport Places from './components/Places/Places'\nimport { arrayMove, arrayRemove } from \"react-movable\";\nimport YMap from './components/YMap/YMap';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.transfer = this.transfer.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n    this.state = {\n      places: [],\n      point: '',\n      ymaps: null,\n    };\n  }\n\n  handleChange(event) {\n    this.setState({\n      point: event.target.value,\n    });\n  }\n\n  handleSubmit() {\n    if (!this.state.point.length) {\n      alert('Enter address, please.');\n      return;\n    }\n    const newPoint =  this.state.point;\n    const askGeocode = this.state.ymaps.geocode(newPoint);\n    askGeocode\n      .then(\n        (result) => {\n          if (!result.metaData.geocoder.found) {\n            alert('Incorrect input! Repeat, please.');\n            this.setState({\n              point: '',\n            });\n            return;\n          }\n          const newPoint = {\n            address: this.state.point,\n            coordinates: result.geoObjects.get(0).geometry.getCoordinates(),\n          };\n          this.setState({\n            places: this.state.places.concat(newPoint),\n            point: '',\n          });\n        },\n        (err) => console.log(err.message)\n      );\n  }\n\n  handleMove({ oldIndex, newIndex }) {\n    this.setState((prevState) => ({\n      places: arrayMove(prevState.places, oldIndex, newIndex),\n    }));\n  }\n\n  handleRemove(index) {\n    this.setState((prevState) => ({\n      places:\n        typeof index !== 'undefined' ?\n          arrayRemove(prevState.places, index) : prevState.places,\n    }));\n  }\n\n  transfer(ymaps) {\n    this.setState({\n      ymaps: ymaps,\n    });\n  }\n\n  handleDrag(event, index) {\n    const places = this.state.places;\n    const newCoordinates = event.get('target').geometry.getCoordinates()\n      .map((coords) => +coords.toPrecision(8));\n    const newAddress = this.state.ymaps.geocode(newCoordinates);\n    newAddress\n      .then(\n        (result) => {\n          const newPoint = {\n            address: result.geoObjects.get(0).properties.getAll().text,\n            coordinates: newCoordinates,\n          };\n          Object.assign(places[index], newPoint);\n          this.setState({\n            places: places,\n          });\n        },\n        (err) => console.log(err.message)\n      );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App__column1\">\n          <Input\n            className='App__input'\n            placeholder='Add new point'\n            value={this.state.point}\n            onInputChange={this.handleChange}\n            onInputSubmit={this.handleSubmit}\n          />\n          {!this.state.places.length ||\n            <Places\n              className='App__places'\n              places={this.state.places}\n              onPointMove={this.handleMove}\n              onButtonDelete={this.handleRemove}\n            />\n          }\n        </div>\n        <div className=\"App__column2\">\n          <YMap\n            className=\"App__map-wrapper\"\n            places={this.state.places}\n            handleTransfer={this.transfer}\n            onDragEnd={this.handleDrag}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}